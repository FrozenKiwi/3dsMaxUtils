//**************************************************************************/
// DESCRIPTION: Manages the undo system for our Dynamic Attributes, and
//				is responsible for releasing descriptors no longer needed.
// AUTHOR: Stephen Taylor
//***************************************************************************/

#pragma once

/*! Our Undo Class.
	This class is necessary to track which parameter block descriptors
	are currently being used.  As we are undone/redone, we need to ensure
	the DynPBCustAttrClassDesc2 lists are updated to reflect which
	blocks are being used, so it can save only the appropriate descriptors.

	This class is also responsible for much of the descriptor memory management,
	when this class is released either the original descriptor or the new
	one must be released (because it is no longer needed). */
class DynPBUndo : public RestoreObj {

private:
	DynPBCustAttrClassDesc* m_pDynPBClassDesc;
	ReferenceTarget* m_pFabricClient;	// The owner of the pblock generated by these descriptors
	ParamBlockDesc2* m_pbOldDesc;		// The descriptor pre-change
	ParamBlockDesc2* m_pbNewDesc;		// The descriptor post-change
	bool m_isHeld;						// If true, the action has not been undone

public:
	DynPBUndo(ParamBlockDesc2* pblock, ReferenceTarget* pDynPB);
	~DynPBUndo();

	void Restore(int isUndo);
	void Redo();
	void EndHold();

	int Size() { return sizeof this; };
	MSTR Description() { return _M("DynPBUndo"); }	
};
